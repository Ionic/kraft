// This file is generated by kxml_compiler from document.xml.
// All changes you do to this file will be lost.

#include "document.h"

#include <QtDebug>
#include <QFile>
#include <QDomDocument>
#include <QtCore/QtDebug>
#include <QtCore/QFile>

namespace KraftXml {

void Footer::setPostText( const QString &v )
{
  mPostText = v;
}

QString Footer::postText() const
{
  return mPostText;
}

void Footer::setGoodbye( const QString &v )
{
  mGoodbye = v;
}

QString Footer::goodbye() const
{
  return mGoodbye;
}

Footer Footer::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "footer" ) {
    qCritical() << "Expected 'footer', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Footer();
  }

  Footer result = Footer();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "postText" ) {
      result.setPostText( e.text() );
    }
    else if ( e.tagName() == "goodbye" ) {
      result.setGoodbye( e.text() );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

void Footer::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "footer" );
  if ( !postText().isEmpty() ) {
    xml.writeTextElement(  "postText", postText() );
  }
  if ( !goodbye().isEmpty() ) {
    xml.writeTextElement(  "goodbye", goodbye() );
  }
  xml.writeEndElement();
}


void Taxsum::setType( const QString &v )
{
  mType = v;
}

QString Taxsum::type() const
{
  return mType;
}

void Taxsum::setValue( const QString &v )
{
  mValue = v;
}

QString Taxsum::value() const
{
  return mValue;
}

Taxsum Taxsum::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "taxsum" ) {
    qCritical() << "Expected 'taxsum', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Taxsum();
  }

  Taxsum result = Taxsum();

  result.setValue( element.text() );
  result.setType( element.attribute( "type" ) );

  if ( ok ) *ok = true;
  return result;
}

void Taxsum::writeElement( QXmlStreamWriter &xml )
{
  if ( !value().isEmpty() ) {
    xml.writeStartElement( "taxsum" );
    if ( !type().isEmpty() ) {
      xml.writeAttribute( "type", type() );
    }
    xml.writeCharacters( value() );
    xml.writeEndElement();
  }
}


void Sums::setNetto( const QString &v )
{
  mNetto = v;
}

QString Sums::netto() const
{
  return mNetto;
}

void Sums::addTaxsum( const Taxsum &v )
{
  mTaxsumList.append( v );
}

void Sums::setTaxsumList( const Taxsum::List &v )
{
  mTaxsumList = v;
}

Taxsum::List Sums::taxsumList() const
{
  return mTaxsumList;
}

void Sums::setBrutto( const QString &v )
{
  mBrutto = v;
}

QString Sums::brutto() const
{
  return mBrutto;
}

Sums Sums::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "sums" ) {
    qCritical() << "Expected 'sums', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Sums();
  }

  Sums result = Sums();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "netto" ) {
      result.setNetto( e.text() );
    }
    else if ( e.tagName() == "taxsum" ) {
      bool ok;
      Taxsum o = Taxsum::parseElement( e, &ok );
      if ( ok ) result.addTaxsum( o );
    }
    else if ( e.tagName() == "brutto" ) {
      result.setBrutto( e.text() );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

void Sums::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "sums" );
  if ( !netto().isEmpty() ) {
    xml.writeTextElement(  "netto", netto() );
  }
  foreach( Taxsum e, taxsumList() ) {
    e.writeElement( xml );
  }
  if ( !brutto().isEmpty() ) {
    xml.writeTextElement(  "brutto", brutto() );
  }
  xml.writeEndElement();
}


void ItemAttribute::setName( const QString &v )
{
  mName = v;
}

QString ItemAttribute::name() const
{
  return mName;
}

void ItemAttribute::setValue( const QString &v )
{
  mValue = v;
}

QString ItemAttribute::value() const
{
  return mValue;
}

ItemAttribute ItemAttribute::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "item_attribute" ) {
    qCritical() << "Expected 'item_attribute', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return ItemAttribute();
  }

  ItemAttribute result = ItemAttribute();

  result.setValue( element.text() );
  result.setName( element.attribute( "name" ) );

  if ( ok ) *ok = true;
  return result;
}

void ItemAttribute::writeElement( QXmlStreamWriter &xml )
{
  if ( !value().isEmpty() ) {
    xml.writeStartElement( "item_attribute" );
    if ( !name().isEmpty() ) {
      xml.writeAttribute( "name", name() );
    }
    xml.writeCharacters( value() );
    xml.writeEndElement();
  }
}


void Item::setNumber( int v )
{
  mNumber = v;
}

int Item::number() const
{
  return mNumber;
}

void Item::setText( const QString &v )
{
  mText = v;
}

QString Item::text() const
{
  return mText;
}

void Item::setAmount( const QString &v )
{
  mAmount = v;
}

QString Item::amount() const
{
  return mAmount;
}

void Item::setUnit( const QString &v )
{
  mUnit = v;
}

QString Item::unit() const
{
  return mUnit;
}

void Item::setTaxType( const QString &v )
{
  mTaxType = v;
}

QString Item::taxType() const
{
  return mTaxType;
}

void Item::setUnitprice( const QString &v )
{
  mUnitprice = v;
}

QString Item::unitprice() const
{
  return mUnitprice;
}

void Item::setItemprice( const QString &v )
{
  mItemprice = v;
}

QString Item::itemprice() const
{
  return mItemprice;
}

void Item::addItemAttribute( const ItemAttribute &v )
{
  mItemAttributeList.append( v );
}

void Item::setItemAttributeList( const ItemAttribute::List &v )
{
  mItemAttributeList = v;
}

ItemAttribute::List Item::itemAttributeList() const
{
  return mItemAttributeList;
}

Item Item::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "item" ) {
    qCritical() << "Expected 'item', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Item();
  }

  Item result = Item();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "text" ) {
      result.setText( e.text() );
    }
    else if ( e.tagName() == "amount" ) {
      result.setAmount( e.text() );
    }
    else if ( e.tagName() == "unit" ) {
      result.setUnit( e.text() );
    }
    else if ( e.tagName() == "taxType" ) {
      result.setTaxType( e.text() );
    }
    else if ( e.tagName() == "unitprice" ) {
      result.setUnitprice( e.text() );
    }
    else if ( e.tagName() == "itemprice" ) {
      result.setItemprice( e.text() );
    }
    else if ( e.tagName() == "item_attribute" ) {
      bool ok;
      ItemAttribute o = ItemAttribute::parseElement( e, &ok );
      if ( ok ) result.addItemAttribute( o );
    }
  }

  result.setNumber( element.attribute( "number" ).toInt() );

  if ( ok ) *ok = true;
  return result;
}

void Item::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "item" );
    if ( !QString::number( number() ).isEmpty() ) {
      xml.writeAttribute( "number", QString::number( number() ) );
    }
  if ( !text().isEmpty() ) {
    xml.writeTextElement(  "text", text() );
  }
  if ( !amount().isEmpty() ) {
    xml.writeTextElement(  "amount", amount() );
  }
  if ( !unit().isEmpty() ) {
    xml.writeTextElement(  "unit", unit() );
  }
  if ( !taxType().isEmpty() ) {
    xml.writeTextElement(  "taxType", taxType() );
  }
  if ( !unitprice().isEmpty() ) {
    xml.writeTextElement(  "unitprice", unitprice() );
  }
  if ( !itemprice().isEmpty() ) {
    xml.writeTextElement(  "itemprice", itemprice() );
  }
  foreach( ItemAttribute e, itemAttributeList() ) {
    e.writeElement( xml );
  }
  xml.writeEndElement();
}


void Items::addItem( const Item &v )
{
  mItemList.append( v );
}

void Items::setItemList( const Item::List &v )
{
  mItemList = v;
}

Item::List Items::itemList() const
{
  return mItemList;
}

Items Items::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "items" ) {
    qCritical() << "Expected 'items', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Items();
  }

  Items result = Items();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "item" ) {
      bool ok;
      Item o = Item::parseElement( e, &ok );
      if ( ok ) result.addItem( o );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

void Items::writeElement( QXmlStreamWriter &xml )
{
  if ( !itemList().isEmpty() ) {
    xml.writeStartElement( "items" );
    foreach( Item e, itemList() ) {
      e.writeElement( xml );
    }
    xml.writeEndElement();
  }
}


void Client::setAddress( const QString &v )
{
  mAddress = v;
}

QString Client::address() const
{
  return mAddress;
}

void Client::setClientId( const QString &v )
{
  mClientId = v;
}

QString Client::clientId() const
{
  return mClientId;
}

Client Client::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "client" ) {
    qCritical() << "Expected 'client', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Client();
  }

  Client result = Client();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "address" ) {
      result.setAddress( e.text() );
    }
    else if ( e.tagName() == "clientId" ) {
      result.setClientId( e.text() );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

void Client::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "client" );
  if ( !address().isEmpty() ) {
    xml.writeTextElement(  "address", address() );
  }
  if ( !clientId().isEmpty() ) {
    xml.writeTextElement(  "clientId", clientId() );
  }
  xml.writeEndElement();
}


void Header::setDocType( const QString &v )
{
  mDocType = v;
}

QString Header::docType() const
{
  return mDocType;
}

void Header::setProject( const QString &v )
{
  mProject = v;
}

QString Header::project() const
{
  return mProject;
}

void Header::setWhiteboard( const QString &v )
{
  mWhiteboard = v;
}

QString Header::whiteboard() const
{
  return mWhiteboard;
}

void Header::setDate( const QString &v )
{
  mDate = v;
}

QString Header::date() const
{
  return mDate;
}

void Header::setIdent( const QString &v )
{
  mIdent = v;
}

QString Header::ident() const
{
  return mIdent;
}

void Header::setSalut( const QString &v )
{
  mSalut = v;
}

QString Header::salut() const
{
  return mSalut;
}

void Header::setPreText( const QString &v )
{
  mPreText = v;
}

QString Header::preText() const
{
  return mPreText;
}

Header Header::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "header" ) {
    qCritical() << "Expected 'header', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Header();
  }

  Header result = Header();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "docType" ) {
      result.setDocType( e.text() );
    }
    else if ( e.tagName() == "project" ) {
      result.setProject( e.text() );
    }
    else if ( e.tagName() == "whiteboard" ) {
      result.setWhiteboard( e.text() );
    }
    else if ( e.tagName() == "date" ) {
      result.setDate( e.text() );
    }
    else if ( e.tagName() == "ident" ) {
      result.setIdent( e.text() );
    }
    else if ( e.tagName() == "salut" ) {
      result.setSalut( e.text() );
    }
    else if ( e.tagName() == "preText" ) {
      result.setPreText( e.text() );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

void Header::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "header" );
  if ( !docType().isEmpty() ) {
    xml.writeTextElement(  "docType", docType() );
  }
  if ( !project().isEmpty() ) {
    xml.writeTextElement(  "project", project() );
  }
  if ( !whiteboard().isEmpty() ) {
    xml.writeTextElement(  "whiteboard", whiteboard() );
  }
  if ( !date().isEmpty() ) {
    xml.writeTextElement(  "date", date() );
  }
  if ( !ident().isEmpty() ) {
    xml.writeTextElement(  "ident", ident() );
  }
  if ( !salut().isEmpty() ) {
    xml.writeTextElement(  "salut", salut() );
  }
  if ( !preText().isEmpty() ) {
    xml.writeTextElement(  "preText", preText() );
  }
  xml.writeEndElement();
}


void Tax::setType( const QString &v )
{
  mType = v;
}

QString Tax::type() const
{
  return mType;
}

void Tax::setValue( const QString &v )
{
  mValue = v;
}

QString Tax::value() const
{
  return mValue;
}

Tax Tax::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "tax" ) {
    qCritical() << "Expected 'tax', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Tax();
  }

  Tax result = Tax();

  result.setValue( element.text() );
  result.setType( element.attribute( "type" ) );

  if ( ok ) *ok = true;
  return result;
}

void Tax::writeElement( QXmlStreamWriter &xml )
{
  if ( !value().isEmpty() ) {
    xml.writeStartElement( "tax" );
    if ( !type().isEmpty() ) {
      xml.writeAttribute( "type", type() );
    }
    xml.writeCharacters( value() );
    xml.writeEndElement();
  }
}


void Meta::setDocDesc( const QString &v )
{
  mDocDesc = v;
}

QString Meta::docDesc() const
{
  return mDocDesc;
}

void Meta::setCurrency( const QString &v )
{
  mCurrency = v;
}

QString Meta::currency() const
{
  return mCurrency;
}

void Meta::setCountry( const QString &v )
{
  mCountry = v;
}

QString Meta::country() const
{
  return mCountry;
}

void Meta::setLanguage( const QString &v )
{
  mLanguage = v;
}

QString Meta::language() const
{
  return mLanguage;
}

void Meta::addTax( const Tax &v )
{
  mTaxList.append( v );
}

void Meta::setTaxList( const Tax::List &v )
{
  mTaxList = v;
}

Tax::List Meta::taxList() const
{
  return mTaxList;
}

void Meta::setOwner( const QString &v )
{
  mOwner = v;
}

QString Meta::owner() const
{
  return mOwner;
}

Meta Meta::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "meta" ) {
    qCritical() << "Expected 'meta', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Meta();
  }

  Meta result = Meta();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "docDesc" ) {
      result.setDocDesc( e.text() );
    }
    else if ( e.tagName() == "currency" ) {
      result.setCurrency( e.text() );
    }
    else if ( e.tagName() == "country" ) {
      result.setCountry( e.text() );
    }
    else if ( e.tagName() == "language" ) {
      result.setLanguage( e.text() );
    }
    else if ( e.tagName() == "tax" ) {
      bool ok;
      Tax o = Tax::parseElement( e, &ok );
      if ( ok ) result.addTax( o );
    }
    else if ( e.tagName() == "owner" ) {
      result.setOwner( e.text() );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

void Meta::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "meta" );
  if ( !docDesc().isEmpty() ) {
    xml.writeTextElement(  "docDesc", docDesc() );
  }
  if ( !currency().isEmpty() ) {
    xml.writeTextElement(  "currency", currency() );
  }
  if ( !country().isEmpty() ) {
    xml.writeTextElement(  "country", country() );
  }
  if ( !language().isEmpty() ) {
    xml.writeTextElement(  "language", language() );
  }
  foreach( Tax e, taxList() ) {
    e.writeElement( xml );
  }
  if ( !owner().isEmpty() ) {
    xml.writeTextElement(  "owner", owner() );
  }
  xml.writeEndElement();
}


void Kraftdocument::setVersion( int v )
{
  mVersion = v;
}

int Kraftdocument::version() const
{
  return mVersion;
}

void Kraftdocument::setLastModified( const QString &v )
{
  mLastModified = v;
}

QString Kraftdocument::lastModified() const
{
  return mLastModified;
}

void Kraftdocument::setMeta( const Meta &v )
{
  mMeta = v;
}

Meta Kraftdocument::meta() const
{
  return mMeta;
}

void Kraftdocument::setHeader( const Header &v )
{
  mHeader = v;
}

Header Kraftdocument::header() const
{
  return mHeader;
}

void Kraftdocument::setClient( const Client &v )
{
  mClient = v;
}

Client Kraftdocument::client() const
{
  return mClient;
}

void Kraftdocument::setItems( const Items &v )
{
  mItems = v;
}

Items Kraftdocument::items() const
{
  return mItems;
}

void Kraftdocument::setSums( const Sums &v )
{
  mSums = v;
}

Sums Kraftdocument::sums() const
{
  return mSums;
}

void Kraftdocument::setFooter( const Footer &v )
{
  mFooter = v;
}

Footer Kraftdocument::footer() const
{
  return mFooter;
}

Kraftdocument Kraftdocument::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "kraftdocument" ) {
    qCritical() << "Expected 'kraftdocument', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  Kraftdocument result = Kraftdocument();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "meta" ) {
      bool ok;
      Meta o = Meta::parseElement( e, &ok );
      if ( ok ) result.setMeta( o );
    }
    else if ( e.tagName() == "header" ) {
      bool ok;
      Header o = Header::parseElement( e, &ok );
      if ( ok ) result.setHeader( o );
    }
    else if ( e.tagName() == "client" ) {
      bool ok;
      Client o = Client::parseElement( e, &ok );
      if ( ok ) result.setClient( o );
    }
    else if ( e.tagName() == "items" ) {
      bool ok;
      Items o = Items::parseElement( e, &ok );
      if ( ok ) result.setItems( o );
    }
    else if ( e.tagName() == "sums" ) {
      bool ok;
      Sums o = Sums::parseElement( e, &ok );
      if ( ok ) result.setSums( o );
    }
    else if ( e.tagName() == "footer" ) {
      bool ok;
      Footer o = Footer::parseElement( e, &ok );
      if ( ok ) result.setFooter( o );
    }
  }

  result.setVersion( element.attribute( "version" ).toInt() );
  result.setLastModified( element.attribute( "lastModified" ) );

  if ( ok ) *ok = true;
  return result;
}

void Kraftdocument::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "kraftdocument" );
    if ( !QString::number( version() ).isEmpty() ) {
      xml.writeAttribute( "version", QString::number( version() ) );
    }
    if ( !lastModified().isEmpty() ) {
      xml.writeAttribute( "lastModified", lastModified() );
    }
  meta().writeElement( xml );
  header().writeElement( xml );
  client().writeElement( xml );
  items().writeElement( xml );
  sums().writeElement( xml );
  footer().writeElement( xml );
  xml.writeEndElement();
}

Kraftdocument Kraftdocument::parseFile( const QString &filename, bool *ok )
{
  QFile file( filename );
  if ( !file.open( QIODevice::ReadOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( &file, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  bool documentOk;
  Kraftdocument c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}

Kraftdocument Kraftdocument::parseString( const QString &xml, bool *ok )
{
  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( xml, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  bool documentOk;
  Kraftdocument c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}

bool Kraftdocument::writeFile( const QString &filename )
{
  QFile file( filename );
  if ( !file.open( QIODevice::WriteOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    return false;
  }

  QXmlStreamWriter xml( &file );
  xml.setAutoFormatting( true );
  xml.setAutoFormattingIndent( 2 );
  xml.writeStartDocument( "1.0" );
  writeElement( xml );
  xml.writeEndDocument();
  file.close();

  return true;
}


}

