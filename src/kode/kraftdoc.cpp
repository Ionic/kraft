// This file is generated by kxml_compiler from kraftdoc.xsd.
// All changes you do to this file will be lost.

#include "kraftdoc.h"

#include <QtDebug>
#include <QFile>
#include <QDomDocument>
#include <QtCore/QtDebug>
#include <QtCore/QFile>

::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "" ) {
    qCritical() << "Expected '', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return ();
  }

   result = ();


  if ( ok ) *ok = true;
  return result;
}

void ::writeElement( QXmlStreamWriter &xml )
{
  xml.writeEmptyElement( "" );
}


void Kraftdocument::setVersion( const QString &v )
{
  mVersion = v;
}

QString Kraftdocument::version() const
{
  return mVersion;
}

void Kraftdocument::setLastModified( const QString &v )
{
  mLastModified = v;
}

QString Kraftdocument::lastModified() const
{
  return mLastModified;
}

void Kraftdocument::set( const  &v )
{
  mUndefined = v;
}

Kraftdocument::() const
{
  return mUndefined;
}

void Kraftdocument::set( const  &v )
{
  mUndefined = v;
}

Kraftdocument::() const
{
  return mUndefined;
}

void Kraftdocument::set( const  &v )
{
  mUndefined = v;
}

Kraftdocument::() const
{
  return mUndefined;
}

void Kraftdocument::set( const  &v )
{
  mUndefined = v;
}

Kraftdocument::() const
{
  return mUndefined;
}

Kraftdocument Kraftdocument::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "kraftdocument" ) {
    qCritical() << "Expected 'kraftdocument', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  Kraftdocument result = Kraftdocument();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "client" ) {
      bool ok;
      Client o = Client::parseElement( e, &ok );
      if ( ok ) result.setClient( o );
    }
    else if ( e.tagName() == "docframe" ) {
      bool ok;
      Docframe o = Docframe::parseElement( e, &ok );
      if ( ok ) result.setDocframe( o );
    }
    else if ( e.tagName() == "items" ) {
      bool ok;
      Items o = Items::parseElement( e, &ok );
      if ( ok ) result.setItems( o );
    }
    else if ( e.tagName() == "sums" ) {
      bool ok;
      Sums o = Sums::parseElement( e, &ok );
      if ( ok ) result.setSums( o );
    }
  }

  result.setVersion( element.attribute( "version" ) );
  result.setLastModified( element.attribute( "lastModified" ) );

  if ( ok ) *ok = true;
  return result;
}

void Kraftdocument::writeElement( QXmlStreamWriter &xml )
{
  xml.writeStartElement( "kraftdocument" );
    if ( !version().isEmpty() ) {
      xml.writeAttribute( "version", version() );
    }
    if ( !lastModified().isEmpty() ) {
      xml.writeAttribute( "lastModified", lastModified() );
    }
  client().writeElement( xml );
  docframe().writeElement( xml );
  items().writeElement( xml );
  sums().writeElement( xml );
  xml.writeEndElement();
}

Kraftdocument Kraftdocument::parseFile( const QString &filename, bool *ok )
{
  QFile file( filename );
  if ( !file.open( QIODevice::ReadOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( &file, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  bool documentOk;
  Kraftdocument c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}

Kraftdocument Kraftdocument::parseString( const QString &xml, bool *ok )
{
  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( xml, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return Kraftdocument();
  }

  bool documentOk;
  Kraftdocument c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}

bool Kraftdocument::writeFile( const QString &filename )
{
  QFile file( filename );
  if ( !file.open( QIODevice::WriteOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    return false;
  }

  QXmlStreamWriter xml( &file );
  xml.setAutoFormatting( true );
  xml.setAutoFormattingIndent( 2 );
  xml.writeStartDocument( "1.0" );
  writeElement( xml );
  xml.writeEndDocument();
  file.close();

  return true;
}

